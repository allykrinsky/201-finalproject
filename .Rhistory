library("stringr")
library("ggplot2")
library("shiny")
library("plotly")
gdp <- read.csv("data/gdp.csv",stringsAsFactors = FALSE)
gdp <- select(gdp, -1, -3)
# get the list of region
get_region_name <- filter(gdp, Description == "All industry total")
region_list <- get_region_name$GeoName
# get the list of industry
get_all_industry <- filter(gdp, GeoName == "Washington")
industry_list <- trimws(get_all_industry$Description, "left")
compared_gdp <- function(state, industry){
state_gdp <- filter(gdp, GeoName == state | GeoName == "United States*")
# remove the blank space in the begining
remove_space <- trimws(state_gdp$Description, "left")
state_gdp$Description = remove_space
industry_gdp <- filter(state_gdp,Description == industry)
#View(industry_gdp)
gathered_industry <- gather(industry_gdp, time, GDP, 3:57) %>%
# add a column for the year
mutate(year = substr(time, 2,5))
gathered_industry$GDP = as.numeric(gathered_industry$GDP)
p <- ggplot(data = gathered_industry) +
geom_line(mapping = aes(x= year, y = GDP, group = GeoName))+
geom_point(mapping = aes(x= year, y = GDP, group = GeoName))+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")
)+
labs(
#title = paste("The GDP in U.S. and",state, "in", industry),
title = paste("The GDP in U.S. and", state, "from 2005 to 2018 \n in",industry),
x = "year",
y = "GDP"
)
ggplotly(p)
}
#compared_gdp("Washington",industry <- "Construction")
library("dplyr")
library("tidyr")
library("httr")
library("stringr")
library("ggplot2")
library("shiny")
library("plotly")
gdp <- read.csv("data/gdp.csv",stringsAsFactors = FALSE)
gdp <- select(gdp, -1, -3)
# get the list of region
get_region_name <- filter(gdp, Description == "All industry total")
region_list <- get_region_name$GeoName
# get the list of industry
get_all_industry <- filter(gdp, GeoName == "Washington")
industry_list <- trimws(get_all_industry$Description, "left")
compared_gdp <- function(state, industry){
state_gdp <- filter(gdp, GeoName == state | GeoName == "United States*")
# remove the blank space in the begining
remove_space <- trimws(state_gdp$Description, "left")
state_gdp$Description = remove_space
industry_gdp <- filter(state_gdp,Description == industry)
#View(industry_gdp)
gathered_industry <- gather(industry_gdp, time, GDP, 3:57) %>%
# add a column for the year
mutate(year = substr(time, 2,5))
gathered_industry$GDP = as.numeric(gathered_industry$GDP)
p <- ggplot(data = gathered_industry) +
geom_line(mapping = aes(x= year, y = GDP, group = GeoName))+
geom_point(mapping = aes(x= year, y = GDP, group = GeoName))+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")
)+
labs(
#title = paste("The GDP in U.S. and",state, "in", industry),
title = paste("The GDP in U.S. and", state, "from 2005 to 2018 \n in",industry),
x = "year",
y = "GDP"
)
ggplotly(p)
}
#compared_gdp("Washington",industry <- "Construction")
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
gdp_dow_plot <- function(year_1, year_2){
for_plot <- for_plot %>% filter(year >= year_1 & year <= year_2)
#label <- paste0(for_plot$month_year, collapse = ", ")
gdp_dow <- ggplot(data = for_plot) +
geom_line(mapping = aes(
x = scales,
y = value,
color = type,
group = type
)) + xlab("Date") + ylab("Percent Change") + scale_x_discrete(
gdp_dow
}
gdp_dow_plot <- function(year_1, year_2){
for_plot <- for_plot %>% filter(year >= year_1 & year <= year_2)
#label <- paste0(for_plot$month_year, collapse = ", ")
gdp_dow <- ggplot(data = for_plot) +
geom_line(mapping = aes(
x = scales,
y = value,
color = type,
group = type
)) + xlab("Date") + ylab("Percent Change")
gdp_dow
}
library("shiny")
library("dplyr")
library("tidyr")
>>>>>>> f29221791e5d38eaa16c33fdd4428f6df4275fb2
source("carter.R")
source("Ally.R")
source("Claire.R")
my_ui <- fluidPage(
titlePanel("GDP vs DOW Jones"),
tabsetPanel(type = "tabs",
tabPanel(
"DOW Jones Seasonal",
sidebarLayout(
sidebarPanel(
radioButtons("ag_type", "Aggregation Type:",
list("Average Closing" = 1,
"Maximum Closing" = 2,
"Minimum Closing" = 3), 1)
),
mainPanel(
plotOutput("dow_monthly")
)
)
),
tabPanel(
"GDP vs. Dow Jones",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "slider", label = "Select Year",
min = 2014, max = 2018, value = c(2015,2016), sep = "")
),
mainPanel(
plotOutput("gdp_dow")
)
)
),
tabPanel(
"United States GDP",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "region", label = "Select Region", selected = "Washington",
region_list
),
selectInput(inputId = "industry", label = "Select Indutry", selected = "All industry total", industry_list)
),
mainPanel(
plotlyOutput("gdp_graph")
)# main panel
)#sidebar layout
)# tabPanel
)
)
<<<<<<< HEAD
=======
my_server <- function(input, output){
output$dow_monthly <- renderPlot({create_monthly_dow_graph(input$ag_type)})
output$gdp_dow <- renderPlot({gdp_dow_plot(input$slider[1], input$slider[2])})
output$gdp_graph <- renderPlotly({
compared_gdp(input$region, input$industry)
})
}
shinyApp(ui = my_ui, server = my_server)
runApp()
shiny::runApp()
library("shiny")
library("dplyr")
library("tidyr")
library("plotly")
source("carter.R")
source("Ally.R")
source("Claire.R")
my_ui <- fluidPage(theme = "bootstrap.css",
titlePanel("GDP vs DOW Jones"),
tabsetPanel(type = "tabs",
tabPanel(
"DOW Jones Seasonal",
tags$p("Test paragraph info"),
sidebarLayout(
sidebarPanel(
radioButtons("ag_type", "Aggregation Type:",
list("Average Closing" = 1,
"Maximum Closing" = 2,
"Minimum Closing" = 3), 1)
),
mainPanel(
plotOutput("dow_monthly")
)
)
),
tabPanel(
"GDP vs. Dow Jones",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "slider", label = "Select Year",
min = 2014, max = 2018, value = c(2015,2016), sep = "")
),
mainPanel(
plotOutput("gdp_dow")
)
)
),
tabPanel(
"United States GDP",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "region1", label = "Select Region", selected = "Washington",
region_list
),
selectInput(
inputId = "region2", label = "Select Second Region", selected = "California",
region_list
),
selectInput(inputId = "industry", label = "Select Indutry", selected = "All industry total", industry_list)
),
mainPanel(
plotlyOutput("gdp_graph")
)# main panel
)#sidebar layout
)# tabPanel
)
)
my_server <- function(input, output){
output$dow_monthly <- renderPlot({create_monthly_dow_graph(input$ag_type)})
output$gdp_dow <- renderPlot({gdp_dow_plot(input$slider[1], input$slider[2])})
output$gdp_graph <- renderPlotly({
compared_gdp(input$region, input$industry)
})
}
shinyApp(ui = my_ui, server = my_server)
<<<<<<< HEAD
shiny::runApp()
runApp()
library("dplyr")
library("tidyr")
library("httr")
library("stringr")
library("ggplot2")
library("shiny")
library("plotly")
gdp <- read.csv("data/gdp.csv",stringsAsFactors = FALSE)
gdp <- select(gdp, -1, -3)
# get the list of region
get_region_name <- filter(gdp, Description == "All industry total")
region_list <- get_region_name$GeoName
# get the list of industry
get_all_industry <- filter(gdp, GeoName == "Washington")
industry_list <- trimws(get_all_industry$Description, "left")
compared_gdp <- function(state_one,state_two, industry){
state_gdp <- filter(gdp, GeoName == state |GeoName == state_two | GeoName == "United States*")
# remove the blank space in the begining
remove_space <- trimws(state_gdp$Description, "left")
state_gdp$Description = remove_space
industry_gdp <- filter(state_gdp,Description == industry)
#View(industry_gdp)
gathered_industry <- gather(industry_gdp, time, GDP, 3:57) %>%
# add a column for the year
mutate(year = substr(time, 2,5))
gathered_industry$GDP = as.numeric(gathered_industry$GDP)
p <- ggplot(data = gathered_industry) +
geom_line(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
geom_point(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")
)+
labs(
title = paste("The GDP in United States,",state_one,"and",state_two, "from 2016 to 2018 in", industry),
x = "year",
y = "GDP"
)
ggplotly(p)
}
#compared_gdp("Washington",industry <- "Construction")
runApp()
library("shiny")
library("dplyr")
library("tidyr")
library("plotly")
source("carter.R")
source("Ally.R")
source("Claire.R")
my_ui <- fluidPage(theme = "bootstrap.css",
titlePanel("GDP vs DOW Jones"),
tabsetPanel(type = "tabs",
tabPanel(
"DOW Jones Seasonal",
tags$p("Test paragraph info"),
sidebarLayout(
sidebarPanel(
radioButtons("ag_type", "Aggregation Type:",
list("Average Closing" = 1,
"Maximum Closing" = 2,
"Minimum Closing" = 3), 1)
),
mainPanel(
plotOutput("dow_monthly")
)
)
),
tabPanel(
"GDP vs. Dow Jones",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "slider", label = "Select Year",
min = 2014, max = 2018, value = c(2015,2016), sep = "")
),
mainPanel(
plotOutput("gdp_dow")
)
)
),
tabPanel(
"United States GDP",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "region1", label = "Select First Region", selected = "Washington",
region_list
),
selectInput(
inputId = "region2", label = "Select Second Region", selected = "California",
region_list
),
selectInput(inputId = "industry", label = "Select Indutry", selected = "All industry total", industry_list)
),
mainPanel(
plotlyOutput("gdp_graph")
)# main panel
)#sidebar layout
)# tabPanel
)
)
my_server <- function(input, output){
output$dow_monthly <- renderPlot({create_monthly_dow_graph(input$ag_type)})
output$gdp_dow <- renderPlot({gdp_dow_plot(input$slider[1], input$slider[2])})
output$gdp_graph <- renderPlotly({
compared_gdp(input$region, input$industry)
})
}
shinyApp(ui = my_ui, server = my_server)
runApp()
library("shiny")
library("dplyr")
library("tidyr")
library("plotly")
source("carter.R")
source("Ally.R")
source("Claire.R")
my_ui <- fluidPage(theme = "bootstrap.css",
titlePanel("GDP vs DOW Jones"),
tabsetPanel(type = "tabs",
tabPanel(
"DOW Jones Seasonal",
tags$p("Test paragraph info"),
sidebarLayout(
sidebarPanel(
radioButtons("ag_type", "Aggregation Type:",
list("Average Closing" = 1,
"Maximum Closing" = 2,
"Minimum Closing" = 3), 1)
),
mainPanel(
plotOutput("dow_monthly")
)
)
),
tabPanel(
"GDP vs. Dow Jones",
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "slider", label = "Select Year",
min = 2014, max = 2018, value = c(2015,2016), sep = "")
),
mainPanel(
plotOutput("gdp_dow")
)
)
),
tabPanel(
"United States GDP",
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "region1", label = "Select First Region", selected = "Washington",
region_list
),
selectInput(
inputId = "region2", label = "Select Second Region", selected = "California",
region_list
),
selectInput(inputId = "industry", label = "Select Indutry", selected = "All industry total", industry_list)
),
mainPanel(
plotlyOutput("gdp_graph")
)# main panel
)#sidebar layout
)# tabPanel
)
)
my_server <- function(input, output){
output$dow_monthly <- renderPlot({create_monthly_dow_graph(input$ag_type)})
output$gdp_dow <- renderPlot({gdp_dow_plot(input$slider[1], input$slider[2])})
output$gdp_graph <- renderPlotly({
compared_gdp(input$region1,input$region2, input$industry)
})
}
shinyApp(ui = my_ui, server = my_server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library("dplyr")
library("tidyr")
library("httr")
library("stringr")
library("ggplot2")
library("shiny")
library("plotly")
gdp <- read.csv("data/gdp.csv",stringsAsFactors = FALSE)
gdp <- select(gdp, -1, -3)
# get the list of region
get_region_name <- filter(gdp, Description == "All industry total")
region_list <- get_region_name$GeoName
# get the list of industry
get_all_industry <- filter(gdp, GeoName == "Washington")
industry_list <- trimws(get_all_industry$Description, "left")
compared_gdp <- function(state_one,state_two, industry){
state_gdp <- filter(gdp, GeoName == state_one |GeoName == state_two | GeoName == "United States*")
# remove the blank space in the begining
remove_space <- trimws(state_gdp$Description, "left")
state_gdp$Description = remove_space
industry_gdp <- filter(state_gdp,Description == industry)
#View(industry_gdp)
gathered_industry <- gather(industry_gdp, time, GDP, 3:57) %>%
# add a column for the year
mutate(year = substr(time, 2,5))
gathered_industry$GDP = as.numeric(gathered_industry$GDP)
p <- ggplot(data = gathered_industry) +
geom_line(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
geom_point(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")
)+
labs(
title = paste("The GDP in United States,",state_one,"and",state_two, " \n from 2005 to 2018 \n in", industry),
x = "year",
y = "GDP"
)
ggplotly(p)
}
#compared_gdp("Washington",industry <- "Construction")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
=======
>>>>>>> f29221791e5d38eaa16c33fdd4428f6df4275fb2
>>>>>>> 276230adf1f9b3e245afd140943e4ba003356589
#question <-
compared_gdp <- function(state_one,state_two, industry){
state_gdp <- filter(gdp, GeoName == state_one |GeoName == state_two | GeoName == "United States*")
# remove the blank space in the begining
remove_space <- trimws(state_gdp$Description, "left")
state_gdp$Description = remove_space
industry_gdp <- filter(state_gdp,Description == industry)
#View(industry_gdp)
gathered_industry <- gather(industry_gdp, time, GDP, 3:57) %>%
# add a column for the year
mutate(year = substr(time, 2,5))
gathered_industry$GDP = as.numeric(gathered_industry$GDP)
p <- ggplot(data = gathered_industry) +
geom_line(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
geom_point(mapping = aes(x= year, y = GDP, group = GeoName, color = GeoName))+
theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")
)+
labs(
title = paste("The GDP in United States,",state_one,"and",state_two, " \n from 2005 to 2018 \n in", industry),
x = "year",
y = "GDP"
)
ggplotly(p)
}
shiny::runApp()
install.packages("zoo")
runApp()
